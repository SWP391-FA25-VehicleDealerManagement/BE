package com.example.evm.service.vehicle;

import com.example.evm.dto.vehicle.VehicleComparisonDTO;
import com.example.evm.dto.vehicle.VehicleRequest;
import com.example.evm.dto.vehicle.VehicleResponse;
import com.example.evm.entity.dealer.Dealer;
import com.example.evm.entity.vehicle.SalePrice;
import com.example.evm.entity.vehicle.Vehicle;
import com.example.evm.entity.vehicle.VehicleDetail;
import com.example.evm.entity.vehicle.VehicleVariant;
import com.example.evm.exception.ResourceNotFoundException;
import com.example.evm.repository.dealer.DealerRepository;
import com.example.evm.repository.vehicle.VehicleRepository;
import com.example.evm.repository.vehicle.VehicleVariantRepository;
import com.example.evm.repository.vehicle.SalePriceRepository;
import com.example.evm.repository.vehicle.VehicleDetailRepository;

import org.springframework.web.multipart.MultipartFile;
import com.example.evm.service.storage.FileStorageService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

@Slf4j
@Service
@RequiredArgsConstructor
public class VehicleServiceImpl implements VehicleService {

    private final VehicleRepository vehicleRepository;
    private final VehicleVariantRepository variantRepository;
    private final SalePriceRepository salePriceRepository;
    private final DealerRepository dealerRepository;
    private final FileStorageService fileStorageService;
    private final VehicleDetailRepository detailRepository;

    // üü¢ L·∫•y danh s√°ch xe c√≤n ho·∫°t ƒë·ªông
    @Override
    @Transactional(readOnly = true)
    public List<VehicleResponse> getAllVehicles() {
        return vehicleRepository.findAll().stream()
                .filter(v -> "ACTIVE".equalsIgnoreCase(v.getStatus()))
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    // üî¥ L·∫•y danh s√°ch xe INACTIVE
    @Override
    @Transactional(readOnly = true)
    public List<VehicleResponse> getAllInactiveVehicles() {
        return vehicleRepository.findAll().stream()
                .filter(v -> "INACTIVE".equalsIgnoreCase(v.getStatus()))
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    // üè¢ L·∫•y danh s√°ch xe theo Dealer ID
    @Override
    @Transactional(readOnly = true)
    public List<VehicleResponse> getVehiclesByDealerId(Long dealerId) {
        // 1. G·ªçi Repository ƒë·ªÉ t√¨m c√°c xe ƒëang active c·ªßa dealer ƒë√≥
        List<Vehicle> vehicles = vehicleRepository.findByDealer_DealerIdAndStatusIgnoreCase(dealerId, "ACTIVE");

        // 2. Chuy·ªÉn ƒë·ªïi sang DTO v√† tr·∫£ v·ªÅ
        return vehicles.stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    //  L·∫•y xe theo ID
    @Override
    @Transactional(readOnly = true)
    public VehicleResponse getVehicleById(Long id) {
        // 1. L·∫•y th√¥ng tin Vehicle ch√≠nh
        Vehicle vehicle = vehicleRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Vehicle not found with id: " + id));

        // 2. L·∫•y th√¥ng tin VehicleDetail t∆∞∆°ng ·ª©ng (n·∫øu c√≥)
        VehicleDetail detail = null;
        if (vehicle.getVariant() != null) {
            detail = detailRepository.findByVariant_VariantId(vehicle.getVariant().getVariantId())
                                     .orElse(null); // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng t√¨m th·∫•y detail
        }

        // 3. G·ªçi CONSTRUCTOR M·ªöI c·ªßa VehicleResponse
        return new VehicleResponse(vehicle, detail);
    }

    // üü† T√¨m ki·∫øm theo t√™n xe
    @Override
    @Transactional(readOnly = true)
    public List<VehicleResponse> searchVehiclesByName(String name) {
        return vehicleRepository.searchByName(name)
                .stream()
                .map(this::convertToResponse)
                .toList();
    }

    // üîπ Th√™m m·ªõi Vehicle
    @Override
    @Transactional
    public VehicleResponse addVehicle(VehicleRequest request, MultipartFile file) {
        // 1. L∆∞u file ·∫£nh v√† l·∫•y v·ªÅ t√™n file duy nh·∫•t
        String filename = fileStorageService.save(file);
        // T·∫°o URL (gi·∫£ s·ª≠ endpoint xem ·∫£nh c·ªßa Vehicle s·∫Ω l√† /api/vehicles/images/{filename})
        String imageUrl = "/api/vehicles/images/" + filename;

        // 2. Logic c≈© c·ªßa b·∫°n
        Vehicle vehicle = new Vehicle();
        vehicle.setName(request.getName() != null ? request.getName() : request.getVehicleName());
        vehicle.setColor(request.getColor());
        vehicle.setImage(imageUrl); // <-- L∆∞u URL v√†o DB, KH√îNG d√πng request.getImage()
        vehicle.setPrice(request.getPrice());
        vehicle.setStock(request.getStock());
        vehicle.setStatus("ACTIVE");

        if (request.getDealerId() != null) {
            dealerRepository.findById(request.getDealerId()).ifPresent(vehicle::setDealer);
        }

        if (request.getVariantId() != null) {
            VehicleVariant variant = variantRepository.findById(request.getVariantId())
                    .orElseThrow(() -> new RuntimeException("Variant not found with id: " + request.getVariantId()));
            vehicle.setVariant(variant);
        }

        Vehicle saved = vehicleRepository.save(vehicle);
        return convertToResponse(saved);
    }

    // üîπ C·∫≠p nh·∫≠t Vehicle
    @Override
    @Transactional
    public VehicleResponse updateVehicle(Long id, VehicleRequest request, MultipartFile file) {
        Vehicle vehicle = vehicleRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Vehicle not found with id: " + id));

        // X·ª≠ l√Ω file ·∫£nh n·∫øu ng∆∞·ªùi d√πng c√≥ g·ª≠i file m·ªõi
        if (file != null && !file.isEmpty()) {
            String filename = fileStorageService.save(file);
            String imageUrl = "/api/vehicles/images/" + filename;
            vehicle.setImage(imageUrl); // C·∫≠p nh·∫≠t ·∫£nh m·ªõi
        }

        // C·∫≠p nh·∫≠t c√°c th√¥ng tin kh√°c
        String newName = request.getName() != null ? request.getName() : request.getVehicleName(); // Logic c≈© c·ªßa b·∫°n
        if (newName != null) {
            vehicle.setName(newName);
        }

        // Ki·ªÉm tra color tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        if (request.getColor() != null) {
            vehicle.setColor(request.getColor());
        }

        // Ki·ªÉm tra price tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        if (request.getPrice() != null) {
            vehicle.setPrice(request.getPrice());
        }

        // Ki·ªÉm tra stock tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        if (request.getStock() != null) {
            vehicle.setStock(request.getStock());
        }

        // Ki·ªÉm tra dealerId tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        if (request.getDealerId() != null) {
            dealerRepository.findById(request.getDealerId()).ifPresent(vehicle::setDealer);
        }

        // Ki·ªÉm tra variantId tr∆∞·ªõc khi c·∫≠p nh·∫≠t
        if (request.getVariantId() != null) {
            VehicleVariant variant = variantRepository.findById(request.getVariantId())
                    .orElseThrow(() -> new RuntimeException("Variant not found with id: " + request.getVariantId()));
            vehicle.setVariant(variant);
        }
        // --- K·∫æT TH√öC PH·∫¶N S·ª¨A L·ªñI ---


        Vehicle updated = vehicleRepository.save(vehicle);

        // L·∫•y detail ƒë·ªÉ tr·∫£ v·ªÅ (nh∆∞ code tr∆∞·ªõc)
        VehicleDetail detail = null;
        if (updated.getVariant() != null) {
            detail = detailRepository.findByVariant_VariantId(updated.getVariant().getVariantId()).orElse(null);
        }
        return new VehicleResponse(updated, detail);
    }

    // üî¥ X√≥a m·ªÅm Vehicle (set status = INACTIVE)
    @Override
    @Transactional
    public void deactivateVehicle(Long id) {
        Vehicle vehicle = vehicleRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Vehicle not found with id: " + id));

        vehicle.setStatus("INACTIVE");
        vehicleRepository.save(vehicle);
        log.info("üö´ Vehicle {} set to INACTIVE", id);
    }

    // üü¢ K√≠ch ho·∫°t l·∫°i xe (status = ACTIVE)
    @Override
    @Transactional
    public void activateVehicle(Long id) {
        Vehicle vehicle = vehicleRepository.findById(id)
                .orElseThrow(() -> new ResourceNotFoundException("Vehicle not found with id: " + id));

        vehicle.setStatus("ACTIVE");
        vehicleRepository.save(vehicle);
        log.info("‚úÖ Vehicle {} set to ACTIVE", id);
    }

    // üîç So s√°nh variant gi·ªØa c√°c xe
    @Override
    @Transactional(readOnly = true)
    public List<VehicleComparisonDTO> compareVariants(List<Long> variantIds) {
        if (variantIds == null || variantIds.isEmpty()) {
            return new ArrayList<>();
        }

        Long currentDealerId = 1L; // TODO: thay b·∫±ng Dealer ID c·ªßa user ƒëƒÉng nh·∫≠p
        List<VehicleVariant> variants = variantRepository.findAllById(variantIds);

        return variants.stream().map(variant -> {
            SalePrice latestPrice = salePriceRepository
                    .findTopByDealerIdAndVariantIdOrderByEffectiveDateDesc(currentDealerId, variant.getVariantId());

            return VehicleComparisonDTO.builder()
                    .variantId(variant.getVariantId())
                    .variantName(variant.getName())
                    .modelId(variant.getModel().getModelId())
                    .modelName(variant.getModel().getName())
                    .modelDescription(variant.getModel().getDescription())
                    .price(latestPrice != null ? latestPrice.getPrice() : null)
                    .dealerId(latestPrice != null ? latestPrice.getDealerId() : null)
                    .effectiveDate(latestPrice != null ? latestPrice.getEffectiveDate().toString() : "N/A")
                    .variantImage(variant.getImage())
                    .build();
        }).collect(Collectors.toList());
    }

    // üß© Convert Entity ‚Üí Response DTO
    private VehicleResponse convertToResponse(Vehicle vehicle) {
        Long dealerId = vehicle.getDealer() != null ? vehicle.getDealer().getDealerId() : null;
        Long variantId = vehicle.getVariant() != null ? vehicle.getVariant().getVariantId() : null;

        if (dealerId != null && variantId != null) {
            SalePrice latestPrice = salePriceRepository
                    .findTopByDealerIdAndVariantIdOrderByEffectiveDateDesc(dealerId, variantId);
            if (latestPrice != null) {
                vehicle.setPrice(latestPrice.getPrice().doubleValue());
            }
        }

        return new VehicleResponse(vehicle);
    }
}
